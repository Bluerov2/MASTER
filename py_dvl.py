#!/usr/bin/env python


##
##	This program reads the values from csv files generated by "save_data.py"
##  Convert the DVL datas into a trajectory estimation
##	Plot the estimated and real results
##


import matplotlib.pyplot as plt
import numpy as np
import os
import csv
import math

##
## Lists where the datas from csv file will be saved
##

# -----  DVL  -----
dvl_timestamp = []
dvl_x = []
dvl_y = []
dvl_z = []
# -----  Robot  -----
robot_timestamp = []
robot_x = []
robot_y = []
robot_z = []
robot_yaw = []

##
## Read csv files and save them into the lists previously created, then remove the first value (which is '0')
##

# -----  DVL  -----  
my_path = os.path.abspath(os.path.dirname(__file__))
path = os.path.join(my_path, "data/dvl.csv")
with open(path) as csv_file:
	csv_reader = csv.DictReader(csv_file, delimiter=',')
	for row in csv_reader:
		dvl_timestamp.append(float(row['time']))
		dvl_x.append(float(row['X']))
		dvl_y.append(float(row['Y']))
		dvl_z.append(float(row['Z']))
del dvl_timestamp[0]
del dvl_x[0]
del dvl_y[0]
del dvl_z[0]
# -----  Robot  -----
my_path = os.path.abspath(os.path.dirname(__file__))
path = os.path.join(my_path, "data/robot.csv")
with open(path) as csv_file:
	csv_reader = csv.DictReader(csv_file, delimiter=',')
	for row in csv_reader:
		robot_timestamp.append(float(row['time']))
		robot_x.append(float(row['X']))
		robot_y.append(float(row['Y']))
		robot_z.append(float(row['Z']))
		robot_yaw.append(float(row['Yaw']))
del robot_timestamp[0]
del robot_x[0]
del robot_y[0]
del robot_z[0]
del robot_yaw[0]


##
## Convert the datas from dvl to an estimated trajectory
##

previous_time = 0
time = 0
dt = 0
estimated_traj_x = []
estimated_traj_y = []
estimated_traj_z = []
real_traj_x = []
real_traj_y = []
real_traj_z = []


for i in range(len(robot_timestamp)-1):
	for j in range(len(dvl_timestamp)):
		# Find a match between the two times
		if robot_timestamp[i] <= dvl_timestamp[j] and robot_timestamp[i+1] > dvl_timestamp[j]:
			# Take the 1st values
			if len(estimated_traj_x) == 0:
				previous_time = dvl_timestamp[j]
				estimated_traj_x.append(robot_x[i])
				estimated_traj_y.append(robot_y[i])
				estimated_traj_z.append(robot_z[i])
			else:
				time = dvl_timestamp[j]
				dt = float(time - previous_time)
				previous_time = time
				estimated_traj_x.append(estimated_traj_x[-1] - dvl_x[j] * dt * math.cos(robot_yaw[i]) + dvl_y[j] * dt * math.sin(robot_yaw[i]) )
				estimated_traj_y.append(estimated_traj_y[-1] - dvl_x[j] * dt * math.sin(robot_yaw[i]) - dvl_y[j] * dt * math.cos(robot_yaw[i]) )
				estimated_traj_z.append(estimated_traj_z[-1] - dvl_z[j] * dt )

			# Reduce the number of values for the real trajectory
			real_traj_x.append(robot_x[i])
			real_traj_y.append(robot_y[i])
			real_traj_z.append(robot_z[i])


##
##	Plot the results
##

"""
path = os.path.join(os.path.abspath(os.path.dirname(__file__)), "data/trajectories.csv")
with open(path, mode='w') as csv_file:
	writer = csv.writer(csv_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
	writer.writerow(['estimation_X','estimation_Y','estimation_Z','real_X','real_Y','real_Z'])
	for i in range(len(estimated_traj_x)):
		writer.writerow([estimated_traj_x[i], estimated_traj_y[i], estimated_traj_z[i], real_traj_x[i], real_traj_y[i], real_traj_z[i]])		
"""

plt.title("trajectories")
plt.plot(estimated_traj_x,estimated_traj_y,'r')
plt.plot(real_traj_x,real_traj_y,'b')
plt.show()

# Error:
error = []
for i in range(len(estimated_traj_x)):
	error.append(math.sqrt((estimated_traj_x[i]-real_traj_x[i])**2+(estimated_traj_y[i]-real_traj_y[i])**2))

plt.title("error")
plt.plot(error)
plt.show()



















